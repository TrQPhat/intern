import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:my_app/database/contract_controller.dart';
import 'package:my_app/features/auth/repositories/AuthRepository.dart';
import 'package:my_app/features/contract/repositories/ContractRepository.dart';
import 'package:my_app/services/connection_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

class FirebaseService {
  static final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  /// Kh·ªüi t·∫°o Firebase v√† FCM
  static Future<void> initialize() async {
    await Firebase.initializeApp();

    FirebaseMessaging messaging = FirebaseMessaging.instance;

    // L·∫•y FCM Token
    String? token = await messaging.getToken();
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('device_token', token!);

    print("üîë FCM Token: $token");

    // C·∫•u h√¨nh local notification
    const androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const initSettings = InitializationSettings(android: androidSettings);
    await flutterLocalNotificationsPlugin.initialize(initSettings);
    await setupFlutterNotifications();

    // Khi app b·ªã ƒë√≥ng h·∫≥n
    FirebaseMessaging.instance.getInitialMessage().then((message) {
      if (message != null) {
        _handleFCM(message, from: "üö™ Terminated");
      }
    });

    // App ƒëang foreground
    FirebaseMessaging.onMessage.listen((message) {
      _handleFCM(message, from: "üü¢ Foreground");
      _showLocalNotification(message);
    });

    // App ƒëang background v√† ƒë∆∞·ª£c m·ªü l√™n t·ª´ th√¥ng b√°o
    FirebaseMessaging.onMessageOpenedApp.listen((message) {
      _handleFCM(message, from: "üîÑ Background");
    });
  }

  /// X·ª≠ l√Ω message t√πy tr·∫°ng th√°i
  static Future<void> _handleFCM(RemoteMessage message,
      {String from = ""}) async {
    final data = message.data;

    final contractId = data['contract_id'];
    final actionType = data['action_type'];

    if (contractId == null || actionType == null) return;

    print("$from - Nh·∫≠n FCM:");
    print("üìå Title: ${message.notification?.title}");
    print("üìù Body: ${message.notification?.body}");
    print("üì¶ Data: ${message.data}");

    final connectionService = ConnectionService();
    final isConnected = await connectionService.hasConnection();
    if (!isConnected) {
      print('‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng, kh√¥ng th·ªÉ ƒë·ªìng b·ªô');
      return;
    }

    switch (actionType) {
      case 'insert':
        try {
          final contract =
              await ContractRepository.getContractByID(int.parse(contractId));
          await ContractController.addContract(contract, status: "synced");
          print('ƒë√£ th√™m contract: $contractId');
        } catch (e) {
          print(' L·ªói l·∫•y contract: $e');
        }
        break;
      case 'update':
        try {
          final contract =
              await ContractRepository.getContractByID(int.parse(contractId));
          await ContractController.updateContract(contract, status: "synced");
          print('ƒë√£ c·∫≠p nh·∫≠t contract: $contractId');
        } catch (e) {
          print(' L·ªói khi ƒë·ªìng b·ªô contract: $e');
        }
        break;

      case 'delete':
        try {
          await ContractController.deleteContract(int.parse(contractId),
              status: "synced");
          print('ƒê√£ x√≥a contract $contractId kh·ªèi isar');
        } catch (e) {
          print(' L·ªói khi x√≥a contract: $e');
        }
        break;

      default:
        print('‚ö†Ô∏è Unknown action_type: $actionType');
    }
  }

  /// Hi·ªÉn th·ªã local notification khi app ƒëang foreground
  static Future<void> _showLocalNotification(RemoteMessage message) async {
    const androidDetails = AndroidNotificationDetails(
      'fcm_default_channel', // channel ID
      'Th√¥ng b√°o FCM', // channel name
      channelDescription: 'Hi·ªÉn th·ªã th√¥ng b√°o khi app foreground',
      importance: Importance.max,
      priority: Priority.high,
    );

    const notificationDetails = NotificationDetails(android: androidDetails);

    await flutterLocalNotificationsPlugin.show(
      0,
      message.notification?.title ?? 'Th√¥ng b√°o',
      message.notification?.body ?? '',
      notificationDetails,
    );
  }

  static Future<void> setupFlutterNotifications() async {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'default_channel', // ID ph·∫£i tr√πng v·ªõi `default_notification_channel_id`
      'Th√¥ng b√°o m·∫∑c ƒë·ªãnh', // T√™n hi·ªÉn th·ªã trong c√†i ƒë·∫∑t
      description: 'K√™nh th√¥ng b√°o m·∫∑c ƒë·ªãnh',
      importance: Importance.high,
    );

    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  }
}
